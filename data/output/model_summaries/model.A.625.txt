there are two blog posts on using deepstate part 1 and part 2. overview of features tests look like google test but can use symbolic executionfuzzing to generate data parameterized unit testing easier to learn than binary analysis toolsfuzzers but provides similar functionality already supports manticore angr libfuzzer filebased fuzzing with e.g. afl or eclipser more backends likely in future switch test generation tool without rewriting test harness work around showstopper bugs find out which tool works best for your code under test different tools find different bugsvulnerabilities fair way to benchmarkbakeoff tools provides test replay for regression plus effective automatic test case reduction to aid debugging supports apisequence generation with extensions to google test interface concise readable way oneof to say run one of these blocks of code same construct supports fixed value set nondeterminism e.g. writing a posix file system tester is pleasant not painful as in pure google test idioms provides highlevel strategies for improving symbolic executionfuzzing effectiveness pumping novel to deepstate to pick concrete values when symbolic execution is too expensive automatic decomposition of integer compares to guide coveragedriven fuzzers to put it another way deepstate sits at the intersection of propertybased testing traditional unit testing fuzzing and symbolic execution.