there is an english document here click to view a powerful and easy to use segmented view segmentedcontrol pagingview pagerview pagecontrol categoryview 腾讯新闻、今日头条、qq音乐、网易云音乐、京东、爱奇艺、腾讯视频、淘宝、天猫、简书、微博等所有主流app分类切换滚动视图 与其他的同类三方库对比的优点： 指示器逻辑面向协议编程protocol oriented programming，可以为所欲为的扩展指示器效果； 提供更加全面丰富效果，几乎支持所有主流app效果； 使用子类化管理cell样式，逻辑更清晰，扩展更简单； objectivec版本 如果你在找objectivec版本，请点击查看 jxcategoryview 效果预览 指示器效果预览 说明 gif line固定宽度 line与cell等宽 line延长 line延长偏移 rainbowline🌈彩虹 dotline点线 doubleline双线 triangle三角形底部 triangle三角形顶部 background椭圆形 background椭圆形阴影 background遮罩有背景 background遮罩无背景 background渐变色渐变是固定的 gradient渐变色渐变随着位置变动 image底部 image背景 混合使用 以下指示器支持上下位置切换： 、、、、、 cell样式效果预览 说明 gif 颜色渐变 文字渐变 大小缩放 大小缩放字体粗细 大小缩放点击动画 大小缩放cell宽度缩放 titleimagetop titleimageleft titleimagebottom titleimageright titleimage只有图片 titleorimage高仿腾讯视频 数字 红点 多行富文本 多种cell混用 特殊效果预览 说明 gif 数据源过少 isitemspacingaverageenabled为true 数据源过少 isitemspacingaverageenabled为false segmentedcontrol参考类 导航栏使用参考类 嵌套使用参考nestviewcontroller类 个人主页上下左右滚动、header悬浮参考pagingviewcontroller类 更多样式请点击查看jxpagingview库 数据加载刷新参考loaddataviewcontroller类 要求 ios 8.0 xcode 9 swift 4.2 安装 手动 clone代码，把sources文件夹拖入项目，就可以使用了； cocoapods 先执行pod repo update，再执行pod install carthage 在cartfile文件添加： 然后执行carthage update platform ios 即可 使用 jxsegmentedview使用示例 1.初始化jxsegmentedview 2.初始化datasource datasouce类型为jxsegmentedviewdatasource协议。使用单独的类实现jxsegmentedviewdatasource协议，实现代码隔离。选择不同的类赋值给datasource，就可以控制jxsegmentedview显示效果，实现插件化。比如选择jxsegmentedtitleimagedatasource类作为datasource就选择了文字图片的显示效果；选择jxsegmentednumberdatasource类作为datasource就选择了文字加数字的显示效果； 3.初始化指示器indicator 4.实现jxsegmentedviewdelegate代理 contentscrollview列表容器使用示例 直接使用uiscrollview自定义使用示例 因为代码比较分散，而且代码量也比较多，所有不推荐使用该方法。要正确使用需要注意的地方比较多，尤其对于刚接触ios的同学来说不太友好。 不直接贴代码了，具体点击loaddatacustomviewcontroller查看源代码了解。 作为替代，官方使用强烈推荐使用下面这种方式👇👇👇。 配合jxsegmentedlistcontainerview封装类使用示例 jxsegmentedlistcontainerview是对列表视图高度封装的类，具有以下优点： 相对于直接使用uiscrollview自定义，封装度高、代码集中、使用简单； 列表懒加载：当显示某个列表的时候，才进行列表初始化。而不是一次性加载全部列表，性能更优； 1.初始化jxsegmentedlistcontainerview 2.实现jxsegmentedlistcontainerviewdatasource代理方法 3.列表实现jxsegmentedlistcontainerviewlistdelegate代理方法 不管列表是uiview还是uiviewcontroller都可以，提高使用灵活性，更便于现有的业务接入。 swift 如果列表是vc，就返回vc.view 如果列表是view，就返回view自己 returns 返回列表视图 func listview uiview return view 可选使用，列表显示的时候调用 func listdidappear 可选使用，列表消失的时候调用 func listdiddisappear 4.将关键事件告知jxsegmentedlistcontainerview 在下面两个jxsegmentedviewdelegate代理方法里面调用对应的代码，一定不要忘记这一条❗️❗️❗️ swift func segmentedview segmentedview jxsegmentedview didclickselecteditemat index int 传递didclickselecteditemat事件给listcontainerview，必须调用！！！ listcontainerview.didclickselecteditemat index func segmentedview segmentedview jxsegmentedview scrollingfrom leftindex int to rightindex int percent cgfloat 传递scrolling事件给listcontainerview，必须调用！！！ listcontainerview.segmentedviewscrollingfrom leftindex to rightindex percent percent selectedindex segmentedview.selectedindex 具体点击loaddataviewcontroller查看源代码了解 使用总结 因为jxsegmentedview本身支持许多特性：指示器、cell样式、列表容器等，如何有序管理好代码成了一个难题。借助于协议、继承、封装类极大的简化了使用难度，而且提高了灵活性，扩展相当容易。 核心主类：jxsegmentedview 数据源cell样式定制类：遵从jxsegmentedviewdatasource协议的类 指示器类：遵从jxsegmentedindicatorprotocol协议的uiview类 列表容器：官方推荐jxsegmentedlistcontainerview类，特殊情况可以使用uiscrollview自定义 指示器样式自定义 需要继承jxsegmentedindicatorprotocol协议，点击参看jxsegmentedindicatorprotocol 提供了继承jxsegmentedindicatorprotocol协议的基类jxsegmentedindicatorbaseview，里面提供了许多基础属性。点击参看jxsegmentedindicatorbaseview 自定义指示器，请参考已实现的指示器视图，多尝试、多思考，再有问题请提issue或加入反馈qq群 datasource和cell自定义 需要继承jxsegmentedviewdatasource协议，点击参看jxsegmentedviewdatasource 提供了继承jxsegmentedviewdatasource协议的基类jxsegmentedbasedatasource，里面提供了许多基础属性。点击参看jxsegmentedbasedatasource 任何自定义需求，datasource、cell、itemmodel三个都要子类化。即使某个子类cell什么事情都不做。用于维护继承链，以免以后子类化都不知道要继承谁了； datasource和cell自定义，请参考已实现的datasource，多尝试、多思考，再有问题请提issue或加入反馈qq群 常用属性说明 常用属性说明文档地址 其他使用注意事项 其他使用注意事项文档地址 补充 如果刚开始使用jxsegmentedview，当开发过程中需要支持某种特性时，请务必先搜索使用文档或者源代码。确认是否已经实现支持了想要的特性。请别不要文档和源代码都没有看，就直接提问，这对于大家都是一种时间浪费。如果没有支持想要的特性，欢迎提issue讨论，或者自己实现提一个pullrequest。 该仓库保持及时更新，对于主流新的分类选择效果会第一时间支持。使用过程中，有任何建议或问题，可以通过以下方式联系我： 邮箱：317437084qq.com qq群： 112440276 喜欢就star❤️一下吧 license jxsegmentedview is released under the mit license.