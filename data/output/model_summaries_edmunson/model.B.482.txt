2018，开始你的pwa学习之旅 pwa学习系列技术文章汇总至此处 戳我，或者直接查看下面列表 第一篇：2018，开始你的pwa学习之旅（本文） 第二篇：10分钟学会使用manifest，让你的webapp更“native” 第三篇：从今天开始，让你的webapp离线可用 第四篇：troubleshooting 解决firebase login验证失败问题 第五篇：与你的用户保持联系 web push功能 第六篇：how to debug 在chrome中调试你的pwa 第七篇：增强交互：使用notification api来进行提醒 第八篇：使用service worker进行后台数据同步 第九篇：pwa实践中的问题与解决方案 第十篇：resource hint 提升页面加载性能与体验 pwa作为今年最火热的技术概念之一，对提升web应用的安全、性能和体验有着很大的意义，非常值得我们去了解与学习。 首先简单了解一下pwa。 什么是pwa pwa，即progressive web app 是提升 web app 的体验的一种新方法，能给用户原生应用的体验。 我们需要理解的是，pwa不是某一项技术，或者某一个新的产物；而是一系列web技术与标准的集合与应用。通过应用这些新的技术与标准，可以从安全、性能和体验三个方面，优化我们的web app。所以，其实pwa本质上依然是一个web app。 因此，学习pwa其实就是了解与掌握这些pwa背后的技术。本系列文章会针对pwa中所涉及到的技术进行介绍，并配合代码实例来展示各类技术的使用方式。希望通过这一系列文章，让大家对pwa技术有一个更深入的认识。而pwa本身渐进式的思想也可以让我们在业务中“渐进式”地使用这些技术，在成本可控的前提下，不断优化我们的产品。 pwa中的一些技术 pwa本身其实是一个概念集合，它不是指某一项技术，而是通过一系列的web技术与web标准来优化web app的安全、性能和体验。其中涉及到的一些技术概念包括了： web app manifest service worker cache api 缓存 pushnotification 推送与通知 background sync 后台同步 响应式设计 …… 这些技术都是你在学习pwa中不可或缺的。而随着apple在ios safari中也开始支持pwa（其中的某些技术），pwa的舞台更大了。 项目demo 为了配合pwa中相关知识的学习，我专门创建了一个demo web app—— 一个根据关键字查询图书信息的demo。 这个web app最开始是不具备任何pwa的能力。我会在这一系列文章中以这个demo为例，阐述各项技术的同时，将其应用在demo上。也就是说，在这一系列的文章中，我会和大家一起将一个普通的网页应用逐步升级为一个简单的pwa，通过这种方式一起学习。 首先简单介绍一下这个demo。这是一个根据关键词搜索图书信息的应用，用户在前端输入关键词，点击搜索，会请求我们自己的服务器，而服务器使用豆瓣图书api v2来获取数据。 项目使用koa来搭建node服务器，所以需要node版本7.6.0，可以使用nvm来切换到适合的node版本。 要运行该项目，首先 注意，需要切换到basic分支，master分支是上经过pwa升级后最新的demo代码。只有在basic分支才能看到原始的web app。接下来，安装依赖： 最后，运行项目： 然后就可以在上访问到该项目。 基础demo的代码比较简单，这里就不去赘述demo中的代码细节了。简单了解一下项目结构，前端代码都存放于目录中，具体结构如下： 值得一提的是，后续文章内的代码会以分支的形式存在，每篇文章的最终代码会存放于一个对应的分支中。你可以通过方便得切换分支，来查看每篇文章对应的示例代码。 basic分支：基础项目demo，一个普通的图书搜索应用（网站）； manifest分支：基于basic分支，添加manifest等功能； swcache分支：基于manifest分支，添加缓存与离线功能； master分支：应用的最新代码。 …… 写在最后 作为本系列的第一篇文章，本文简单介绍了pwa与其相关的技术概念。通过学习pwa，我们可以很快将其中的优秀技术应用到我们的工作里。在下一部分（manifest分支），我就会介绍如何使用manifest来让你的web app“更native”，拥有一个app shell。 话不多说，下面就让我们来具体地学习pwa相关技术吧！